# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

extensions:
  sigv4auth:
    region: "__AWS_REGION__"
    service: "osis"
    
receivers:
  otlp:
    protocols:
      grpc:
      http:
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  httpcheck/frontendproxy:
    targets:
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}
  redis:
    endpoint: "redis-cart:6379"
    collection_interval: 10s

exporters:
  debug:
  otlp:
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true
  opensearch:
    logs_index: otel
    http:
      endpoint: "http://opensearch:9200"
      tls:
        insecure: true

  otlphttp/traces:
    traces_endpoint: "https://__REPLACE_WITH_OtelTraces_ENDPOINT__"
    auth:
      authenticator: sigv4auth
    compression: none
  otlphttp/logs:
    logs_endpoint: "https://__REPLACE_WITH_OtelLogs_ENDPOINT__"
    auth:
      authenticator: sigv4auth
    compression: none        
  otlphttp/metrics:
    metrics_endpoint: "https://__REPLACE_WITH_OtelMetrics_ENDPOINT__"
    auth:
      authenticator: sigv4auth
    compression: none

processors:
  batch:

connectors:
  spanmetrics:

service:
  extensions: [sigv4auth]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, debug, spanmetrics, otlphttp/traces]
    metrics:
      receivers: [httpcheck/frontendproxy, redis, otlp, spanmetrics]
      processors: [batch]
      exporters: [otlphttp/prometheus, debug, otlphttp/metrics]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [opensearch, otlphttp/logs, debug]
